name: Continuous Deployment

on:
  push:
    branches:
      - main
      - develop
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'development'
        type: choice
        options:
          - development
          - production

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop' || github.event_name == 'workflow_dispatch'

    strategy:
      matrix:
        service: [
          {name: 'user-management', dir: './UserManagementService'},
          {name: 'course-management', dir: './CourseManagementService'},
          {name: 'payment-management', dir: './PaymentManagementService'},
          {name: 'enrollment-management', dir: './EnrollmentManagementService'}
        ]

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Determine environment and namespace
        id: env
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            ENVIRONMENT="${{ github.event.inputs.environment }}"
          elif [[ "${GITHUB_REF}}" == "refs/heads/main" ]]; then
            ENVIRONMENT="production"
          else
            ENVIRONMENT="development"
          fi
          NAMESPACE="default"
          echo "environment=$ENVIRONMENT" >> $GITHUB_OUTPUT
          echo "namespace=$NAMESPACE" >> $GITHUB_OUTPUT

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Update Dockerfile for native module support
        working-directory: ${{ matrix.service.dir }}
        run: |
          if [ -f "Dockerfile" ]; then
            sed -i '/^FROM/a RUN apk add --no-cache python3 make g++ gcc libc-dev' Dockerfile
          else
            echo "Dockerfile not found in ${{ matrix.service.dir }}"
            exit 1
          fi

      - name: Build and push multi-arch Docker images
        uses: docker/build-push-action@v4
        with:
          context: ${{ matrix.service.dir }}
          platforms: linux/amd64,linux/arm64
          push: true
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/${{ matrix.service.name }}:${{ github.sha }}
            ${{ secrets.DOCKERHUB_USERNAME }}/${{ matrix.service.name }}:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            NPM_CONFIG_OPTIONAL=false

  deploy:
    needs: build-and-deploy
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Create kubeconfig file
        run: |
          if [[ "${{ needs.build-and-deploy.outputs.environment }}" == "production" ]]; then
            echo -n "${{ secrets.PROD_KUBE_CONFIG }}" | base64 --decode > ${{ github.workspace }}/kubeconfig
          else
            echo -n "${{ secrets.DEV_KUBE_CONFIG }}" | base64 --decode > ${{ github.workspace }}/kubeconfig
          fi

      - name: Set up Helm
        uses: azure/setup-helm@v1

      - name: Generate values-runtime.yaml
        run: |
          cat > values-runtime.yaml << EOF
          namespace: default
          common:
            registry: ${{ secrets.DOCKERHUB_USERNAME }}
            imagePullPolicy: Always
            environment: ${{ needs.build-and-deploy.outputs.environment }}
          services:
            userManagement:
              tag: ${{ github.sha }}
              ...
            courseManagement:
              tag: ${{ github.sha }}
              ...
            paymentManagement:
              tag: ${{ github.sha }}
              ...
            enrollmentManagement:
              tag: ${{ github.sha }}
              ...
          EOF

      - name: Deploy to Kubernetes using Helm
        env:
          KUBECONFIG: ${{ github.workspace }}/kubeconfig
        run: |
          cd learning-platform
          helm upgrade --install learning-platform . \
            --namespace default \
            --values values.yaml \
            --values ../values-runtime.yaml

      - name: Verify deployment
        env:
          KUBECONFIG: ${{ github.workspace }}/kubeconfig
        run: |
          kubectl get pods -n default
          kubectl get services -n default
