name: Continuous Deployment

on:
  workflow_run:
    workflows: ["Continuous Integration"]
    types:
      - completed
    branches: [main, develop]

  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'development'
        type: choice
        options:
          - development
          - production

jobs:
  deploy:
    if: |
      (github.event.workflow_run.conclusion == 'success') ||
      (github.event_name == 'workflow_dispatch')
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment || (github.event.workflow_run.head_branch == 'main' && 'production' || 'development') }}

    steps:
    - uses: actions/checkout@v3

    - name: Set up kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'latest'

    - name: Decode kubeconfig secret
      run: |
        echo "${{ secrets[format('{0}_KUBE_CONFIG', github.event.inputs.environment || (github.event.workflow_run.head_branch == 'main' && 'PROD' || 'DEV'))] }}" | base64 -d > kubeconfig
      shell: bash

    - name: Configure kubectl
      uses: azure/k8s-set-context@v3
      with:
        method: kubeconfig
        kubeconfig: ${{ github.workspace }}/kubeconfig

    - name: Set up Helm
      uses: azure/setup-helm@v3
      with:
        version: 'latest'

    - name: Get SHA
      id: vars
      run: echo "sha=${GITHUB_SHA}" >> $GITHUB_OUTPUT
      env:
        GITHUB_SHA: ${{ github.event.workflow_run.head_sha || github.sha }}

    - name: Set environment variables
      id: env
      run: |
        ENVIRONMENT=${{ github.event.inputs.environment || (github.event.workflow_run.head_branch == 'main' && 'production' || 'development') }}
        NAMESPACE=${{ github.event.inputs.environment || (github.event.workflow_run.head_branch == 'main' && 'production' || 'development') }}
        VALUES_FILE_SUFFIX=${{ github.event.inputs.environment || (github.event.workflow_run.head_branch == 'main' && 'prod' || 'dev') }}

        echo "environment=$ENVIRONMENT" >> $GITHUB_OUTPUT
        echo "namespace=$NAMESPACE" >> $GITHUB_OUTPUT
        echo "values_suffix=$VALUES_FILE_SUFFIX" >> $GITHUB_OUTPUT

    - name: Deploy to Kubernetes
      run: |
        # Generate values file with secrets
        cat > values-runtime.yaml << EOF
        namespace: ${{ steps.env.outputs.namespace }}
        common:
          registry: ${{ secrets.DOCKERHUB_USERNAME }}
          imagePullPolicy: Always
          environment: ${{ steps.env.outputs.environment }}

        services:
          client:
            tag: ${{ steps.vars.outputs.sha }}
            enabled: true
            secrets:
              enabled: true
              data:
                REACT_APP_BACKEND_URL: "${{ secrets.REACT_APP_BACKEND_URL }}"
                REACT_APP_EMAILJS_SERVICE_ID: "${{ secrets.REACT_APP_EMAILJS_SERVICE_ID }}"
                REACT_APP_EMAILJS_TEMPLATE_ID: "${{ secrets.REACT_APP_EMAILJS_TEMPLATE_ID }}"
                REACT_APP_EMAILJS_USER_ID: "${{ secrets.REACT_APP_EMAILJS_USER_ID }}"
                REACT_APP_FIREBASE_API_KEY: "${{ secrets.REACT_APP_FIREBASE_API_KEY }}"
                REACT_APP_FIREBASE_APP_ID: "${{ secrets.REACT_APP_FIREBASE_APP_ID }}"
                REACT_APP_FIREBASE_AUTH_DOMAIN: "${{ secrets.REACT_APP_FIREBASE_AUTH_DOMAIN }}"
                REACT_APP_FIREBASE_MEASUREMENT_ID: "${{ secrets.REACT_APP_FIREBASE_MEASUREMENT_ID }}"
                REACT_APP_FIREBASE_MESSAGING_SENDER_ID: "${{ secrets.REACT_APP_FIREBASE_MESSAGING_SENDER_ID }}"
                REACT_APP_FIREBASE_PROJECT_ID: "${{ secrets.REACT_APP_FIREBASE_PROJECT_ID }}"
                REACT_APP_FIREBASE_STORAGE_BUCKET: "${{ secrets.REACT_APP_FIREBASE_STORAGE_BUCKET }}"

          apiGateway:
            tag: ${{ steps.vars.outputs.sha }}
            enabled: true
            secrets:
              enabled: true
              data:
                MONGODB_URL: "${{ secrets.MONGODB_URL }}"

          userManagement:
            tag: ${{ steps.vars.outputs.sha }}
            enabled: true
            secrets:
              enabled: true
              data:
                MONGODB_URL: "${{ secrets.MONGODB_URL }}"

          courseManagement:
            tag: ${{ steps.vars.outputs.sha }}
            enabled: true
            secrets:
              enabled: true
              data:
                MONGODB_URL: "${{ secrets.MONGODB_URL }}"

          paymentManagement:
            tag: ${{ steps.vars.outputs.sha }}
            enabled: true
            secrets:
              enabled: true
              data:
                MONGODB_URL: "${{ secrets.MONGODB_URL }}"

          enrollmentManagement:
            tag: ${{ steps.vars.outputs.sha }}
            enabled: true
            secrets:
              enabled: true
              data:
                MONGODB_URL: "${{ secrets.MONGODB_URL }}"
        EOF

        # Deploy using Helm with values files
        helm upgrade --install learning-platform ./learning-platform \
          --namespace ${{ steps.env.outputs.namespace }} \
          --create-namespace \
          --values ./learning-platform/values.yaml \
          --values ./learning-platform/values-${{ steps.env.outputs.values_suffix }}.yaml \
          --values values-runtime.yaml
